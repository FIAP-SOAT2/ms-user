# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Standard workflow

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**/*.md'
      - .github/dependabot.yml
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**/*.md'
      - .github/dependabot.yml

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  dockerfile_path: '../..'
  CONTAINER_NAME: 'web'

permissions:
  id-token: write
  contents: read

jobs:
  ci:
    name: Build and Test
    runs-on: 'ubuntu-latest'

    steps:
      - name: Set AWS credentials
        run: |
          DATABASE_URL=${{ secrets.DATABASE_URL }}
      - name: Checkout
        uses: actions/checkout@v3.5.0
      - name: Setup Node
        uses: actions/setup-node@v3.6.0
        with:
          node-version-file: .nvmrc
          cache: npm
          registry-url: https://npm.pkg.github.com/
      - name: Install Dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ci_docker:
    name: CI - Docker Image to AWS ECR
    if: ${{ success() && github.event_name != 'pull_request' }}
    needs: [ci]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

    - name: Build, Tag and Push the Image to AWS ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: order_repository
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REPOSITORY .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  cd_main:
    name: CD - Main
    if: ${{ success() && github.event_name != 'pull_request' }}
    needs: [ci_docker]
    runs-on: 'ubuntu-latest'
    steps:
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: order_repository
        IMAGE_TAG: latest
      uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      with:
        task-definition: '../task_definition.json'
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true
